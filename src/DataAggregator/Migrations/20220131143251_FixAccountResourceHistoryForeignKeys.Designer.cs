/* Copyright 2021 Radix Publishing Ltd incorporated in Jersey (Channel Islands).
 *
 * Licensed under the Radix License, Version 1.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 *
 * radixfoundation.org/licenses/LICENSE-v1
 *
 * The Licensor hereby grants permission for the Canonical version of the Work to be
 * published, distributed and used under or by reference to the Licensor’s trademark
 * Radix ® and use of any unregistered trade names, logos or get-up.
 *
 * The Licensor provides the Work (and each Contributor provides its Contributions) on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT,
 * MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Whilst the Work is capable of being deployed, used and adopted (instantiated) to create
 * a distributed ledger it is your responsibility to test and validate the code, together
 * with all logic and performance of that code under all foreseeable scenarios.
 *
 * The Licensor does not make or purport to make and hereby excludes liability for all
 * and any representation, warranty or undertaking in any form whatsoever, whether express
 * or implied, to any entity or person, including any representation, warranty or
 * undertaking, as to the functionality security use, value or other characteristics of
 * any distributed ledger nor in respect the functioning or value of any tokens which may
 * be created stored or transferred using the Work. The Licensor does not warrant that the
 * Work or any use of the Work complies with any law or regulation in any territory where
 * it may be implemented or used or that it will be appropriate for any specific purpose.
 *
 * Neither the licensor nor any current or former employees, officers, directors, partners,
 * trustees, representatives, agents, advisors, contractors, or volunteers of the Licensor
 * shall be liable for any direct or indirect, special, incidental, consequential or other
 * losses of any kind, in tort, contract or otherwise (including but not limited to loss
 * of revenue, income or profits, or loss of use or data, or loss of reputation, or loss
 * of any economic or other opportunity of whatsoever nature or howsoever arising), arising
 * out of or in connection with (without limitation of any use, misuse, of any ledger system
 * or use made or its functionality or any performance or operation of any code or protocol
 * caused by bugs or programming or logic errors or otherwise);
 *
 * A. any offer, purchase, holding, use, sale, exchange or transmission of any
 * cryptographic keys, tokens or assets created, exchanged, stored or arising from any
 * interaction with the Work;
 *
 * B. any failure in a transmission or loss of any token or assets keys or other digital
 * artefacts due to errors in transmission;
 *
 * C. bugs, hacks, logic errors or faults in the Work or any communication;
 *
 * D. system software or apparatus including but not limited to losses caused by errors
 * in holding or transmitting tokens by any third-party;
 *
 * E. breaches or failure of security including hacker attacks, loss or disclosure of
 * password, loss of private key, unauthorised use or misuse of such passwords or keys;
 *
 * F. any losses including loss of anticipated savings or other benefits resulting from
 * use of the Work or any changes to the Work (however implemented).
 *
 * You are solely responsible for; testing, validating and evaluation of all operation
 * logic, functionality, security and appropriateness of using the Work for any commercial
 * or non-commercial purpose and for any reproduction or redistribution by You of the
 * Work. You assume all risks associated with Your use of the Work and the exercise of
 * permissions under this License.
 */

﻿// <auto-generated />
using System;
using System.Numerics;
using DataAggregator.DependencyInjection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAggregator.Migrations
{
    [DbContext(typeof(AggregatorDbContext))]
    [Migration("20220131143251_FixAccountResourceHistoryForeignKeys")]
    partial class FixAccountResourceHistoryForeignKeys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Database.Models.Ledger.History.AccountResourceBalanceHistory", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_id");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<long?>("ToStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("to_state_version");

                    b.HasKey("AccountId", "ResourceId", "FromStateVersion");

                    b.HasIndex("FromStateVersion");

                    b.HasIndex("ToStateVersion");

                    b.HasIndex("AccountId", "FromStateVersion");

                    b.HasIndex("AccountId", "ResourceId")
                        .IsUnique()
                        .HasDatabaseName("IX_account_resource_balance_history_current_balance")
                        .HasFilter("to_state_version is null");

                    b.HasIndex("ResourceId", "FromStateVersion");

                    b.HasIndex("ResourceId", "AccountId", "FromStateVersion");

                    b.ToTable("account_resource_balance_history");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.History.AccountValidatorStakeHistory", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long>("ValidatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("validator_id");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<long?>("ToStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("to_state_version");

                    b.HasKey("AccountId", "ValidatorId", "FromStateVersion");

                    b.HasIndex("FromStateVersion");

                    b.HasIndex("ToStateVersion");

                    b.HasIndex("AccountId", "FromStateVersion");

                    b.HasIndex("AccountId", "ValidatorId")
                        .IsUnique()
                        .HasDatabaseName("IX_account_validator_stake_history_current_stake")
                        .HasFilter("to_state_version is null");

                    b.HasIndex("ValidatorId", "FromStateVersion");

                    b.HasIndex("ValidatorId", "AccountId", "FromStateVersion");

                    b.ToTable("account_validator_stake_history");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.History.ResourceSupplyHistory", b =>
                {
                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_id");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<long?>("ToStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("to_state_version");

                    b.HasKey("ResourceId", "FromStateVersion");

                    b.HasIndex("FromStateVersion");

                    b.HasIndex("ResourceId")
                        .IsUnique()
                        .HasDatabaseName("IX_resource_supply_history_current_supply")
                        .HasFilter("to_state_version is null");

                    b.HasIndex("ToStateVersion");

                    b.ToTable("resource_supply_history");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.History.ValidatorStakeHistory", b =>
                {
                    b.Property<long>("ValidatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("validator_id");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<long?>("ToStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("to_state_version");

                    b.HasKey("ValidatorId", "FromStateVersion");

                    b.HasIndex("FromStateVersion");

                    b.HasIndex("ToStateVersion");

                    b.HasIndex("ValidatorId")
                        .IsUnique()
                        .HasDatabaseName("IX_validator_stake_history_current_stake")
                        .HasFilter("to_state_version is null");

                    b.ToTable("validator_stake_history");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Joins.AccountTransaction", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long>("ResultantStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("state_version");

                    b.Property<bool>("IsFeePayer")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fee_payer");

                    b.Property<bool>("IsSigner")
                        .HasColumnType("boolean")
                        .HasColumnName("is_signer");

                    b.HasKey("AccountId", "ResultantStateVersion");

                    b.HasIndex("ResultantStateVersion");

                    b.ToTable("account_transactions");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.LedgerOperationGroup", b =>
                {
                    b.Property<long>("ResultantStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("state_version");

                    b.Property<int>("OperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("operation_group_index");

                    b.HasKey("ResultantStateVersion", "OperationGroupIndex");

                    b.ToTable("operation_groups");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.LedgerTransaction", b =>
                {
                    b.Property<long>("ResultantStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("state_version");

                    b.Property<Instant>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp");

                    b.Property<long>("Epoch")
                        .HasColumnType("bigint")
                        .HasColumnName("epoch");

                    b.Property<BigInteger>("FeePaid")
                        .HasPrecision(1000)
                        .HasColumnType("numeric(1000,0)")
                        .HasColumnName("fee_paid");

                    b.Property<long>("IndexInEpoch")
                        .HasColumnType("bigint")
                        .HasColumnName("index_in_epoch");

                    b.Property<bool>("IsOnlyRoundChange")
                        .HasColumnType("boolean")
                        .HasColumnName("is_only_round_change");

                    b.Property<bool>("IsStartOfEpoch")
                        .HasColumnType("boolean")
                        .HasColumnName("is_start_of_epoch");

                    b.Property<bool>("IsStartOfRound")
                        .HasColumnType("boolean")
                        .HasColumnName("is_start_of_round");

                    b.Property<byte[]>("Message")
                        .HasColumnType("bytea")
                        .HasColumnName("message");

                    b.Property<Instant>("NormalizedRoundTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("normalized_timestamp");

                    b.Property<long>("RoundInEpoch")
                        .HasColumnType("bigint")
                        .HasColumnName("round_in_epoch");

                    b.Property<Instant>("RoundTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("round_timestamp");

                    b.Property<byte[]>("TransactionAccumulator")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("transaction_accumulator");

                    b.Property<byte[]>("TransactionIdentifierHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("transaction_id");

                    b.HasKey("ResultantStateVersion");

                    b.HasAlternateKey("TransactionAccumulator");

                    b.HasAlternateKey("TransactionIdentifierHash");

                    b.HasIndex("Epoch")
                        .IsUnique()
                        .HasFilter("is_start_of_epoch = true");

                    b.HasIndex("RoundTimestamp");

                    b.HasIndex("Epoch", "RoundInEpoch")
                        .IsUnique()
                        .HasFilter("is_start_of_round = true");

                    b.ToTable("ledger_transactions");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Normalization.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<byte[]>("PublicKey")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("public_key");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Address"), new[] { "Id" });

                    b.HasIndex("FromStateVersion");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Normalization.Resource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<byte[]>("RadixEngineAddress")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("engine_address");

                    b.Property<string>("ResourceIdentifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rri");

                    b.HasKey("Id");

                    b.HasIndex("FromStateVersion");

                    b.HasIndex("ResourceIdentifier")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("ResourceIdentifier"), new[] { "Id" });

                    b.ToTable("resources");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Normalization.Validator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<byte[]>("PublicKey")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("public_key");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Address"), new[] { "Id" });

                    b.HasIndex("FromStateVersion");

                    b.ToTable("validators");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.RawTransaction", b =>
                {
                    b.Property<byte[]>("TransactionIdentifierHash")
                        .HasColumnType("bytea")
                        .HasColumnName("transaction_id");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("payload");

                    b.HasKey("TransactionIdentifierHash");

                    b.ToTable("raw_transactions");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Records.ValidatorProposalRecord", b =>
                {
                    b.Property<long>("Epoch")
                        .HasColumnType("bigint")
                        .HasColumnName("epoch");

                    b.Property<long>("ValidatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("validator_id");

                    b.Property<long>("LastUpdatedAtStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("last_updated_state_version");

                    b.HasKey("Epoch", "ValidatorId");

                    b.HasIndex("LastUpdatedAtStateVersion");

                    b.HasIndex("ValidatorId", "Epoch");

                    b.ToTable("validator_proposal_records");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Substates.AccountResourceBalanceSubstate", b =>
                {
                    b.Property<long>("UpStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("up_state_version");

                    b.Property<int>("UpOperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("up_operation_group_index");

                    b.Property<int>("UpOperationIndexInGroup")
                        .HasColumnType("integer")
                        .HasColumnName("up_operation_index_in_group");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<BigInteger>("Amount")
                        .HasPrecision(1000)
                        .HasColumnType("numeric(1000,0)")
                        .HasColumnName("amount");

                    b.Property<int?>("DownOperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("down_operation_group_index");

                    b.Property<int?>("DownOperationIndexInGroup")
                        .HasColumnType("integer")
                        .HasColumnName("down_operation_index_in_group");

                    b.Property<long?>("DownStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("down_state_version");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_id");

                    b.Property<byte[]>("SubstateIdentifier")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("substate_identifier");

                    b.HasKey("UpStateVersion", "UpOperationGroupIndex", "UpOperationIndexInGroup");

                    b.HasAlternateKey("SubstateIdentifier");

                    b.HasIndex("AccountId", "ResourceId");

                    b.HasIndex("DownStateVersion", "DownOperationGroupIndex");

                    b.HasIndex("ResourceId", "AccountId");

                    b.HasIndex("AccountId", "ResourceId", "Amount")
                        .HasDatabaseName("IX_account_resource_balance_substate_current_unspent_utxos")
                        .HasFilter("down_state_version is null");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("AccountId", "ResourceId", "Amount"), new[] { "SubstateIdentifier" });

                    b.ToTable("account_resource_balance_substates");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Substates.AccountStakeUnitBalanceSubstate", b =>
                {
                    b.Property<long>("UpStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("up_state_version");

                    b.Property<int>("UpOperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("up_operation_group_index");

                    b.Property<int>("UpOperationIndexInGroup")
                        .HasColumnType("integer")
                        .HasColumnName("up_operation_index_in_group");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<BigInteger>("Amount")
                        .HasPrecision(1000)
                        .HasColumnType("numeric(1000,0)")
                        .HasColumnName("amount");

                    b.Property<int?>("DownOperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("down_operation_group_index");

                    b.Property<int?>("DownOperationIndexInGroup")
                        .HasColumnType("integer")
                        .HasColumnName("down_operation_index_in_group");

                    b.Property<long?>("DownStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("down_state_version");

                    b.Property<byte[]>("SubstateIdentifier")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("substate_identifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<long>("ValidatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("validator_id");

                    b.HasKey("UpStateVersion", "UpOperationGroupIndex", "UpOperationIndexInGroup");

                    b.HasAlternateKey("SubstateIdentifier");

                    b.HasIndex("AccountId", "ValidatorId");

                    b.HasIndex("DownStateVersion", "DownOperationGroupIndex");

                    b.HasIndex("ValidatorId", "AccountId");

                    b.ToTable("account_stake_unit_balance_substates");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Substates.AccountXrdStakeBalanceSubstate", b =>
                {
                    b.Property<long>("UpStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("up_state_version");

                    b.Property<int>("UpOperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("up_operation_group_index");

                    b.Property<int>("UpOperationIndexInGroup")
                        .HasColumnType("integer")
                        .HasColumnName("up_operation_index_in_group");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<BigInteger>("Amount")
                        .HasPrecision(1000)
                        .HasColumnType("numeric(1000,0)")
                        .HasColumnName("amount");

                    b.Property<int?>("DownOperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("down_operation_group_index");

                    b.Property<int?>("DownOperationIndexInGroup")
                        .HasColumnType("integer")
                        .HasColumnName("down_operation_index_in_group");

                    b.Property<long?>("DownStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("down_state_version");

                    b.Property<byte[]>("SubstateIdentifier")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("substate_identifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<long?>("UnlockEpoch")
                        .HasColumnType("bigint")
                        .HasColumnName("unlock_epoch");

                    b.Property<long>("ValidatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("validator_id");

                    b.HasKey("UpStateVersion", "UpOperationGroupIndex", "UpOperationIndexInGroup");

                    b.HasAlternateKey("SubstateIdentifier");

                    b.HasIndex("AccountId", "ValidatorId");

                    b.HasIndex("DownStateVersion", "DownOperationGroupIndex");

                    b.HasIndex("ValidatorId", "AccountId");

                    b.ToTable("account_xrd_stake_balance_substates");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Substates.ResourceDataSubstate", b =>
                {
                    b.Property<long>("UpStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("up_state_version");

                    b.Property<int>("UpOperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("up_operation_group_index");

                    b.Property<int>("UpOperationIndexInGroup")
                        .HasColumnType("integer")
                        .HasColumnName("up_operation_index_in_group");

                    b.Property<int?>("DownOperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("down_operation_group_index");

                    b.Property<int?>("DownOperationIndexInGroup")
                        .HasColumnType("integer")
                        .HasColumnName("down_operation_index_in_group");

                    b.Property<long?>("DownStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("down_state_version");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_id");

                    b.Property<byte[]>("SubstateIdentifier")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("substate_identifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("UpStateVersion", "UpOperationGroupIndex", "UpOperationIndexInGroup");

                    b.HasAlternateKey("SubstateIdentifier");

                    b.HasIndex("ResourceId");

                    b.HasIndex("DownStateVersion", "DownOperationGroupIndex");

                    b.ToTable("resource_data_substates");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Substates.ValidatorDataSubstate", b =>
                {
                    b.Property<long>("UpStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("up_state_version");

                    b.Property<int>("UpOperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("up_operation_group_index");

                    b.Property<int>("UpOperationIndexInGroup")
                        .HasColumnType("integer")
                        .HasColumnName("up_operation_index_in_group");

                    b.Property<int?>("DownOperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("down_operation_group_index");

                    b.Property<int?>("DownOperationIndexInGroup")
                        .HasColumnType("integer")
                        .HasColumnName("down_operation_index_in_group");

                    b.Property<long?>("DownStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("down_state_version");

                    b.Property<long?>("EffectiveEpoch")
                        .HasColumnType("bigint")
                        .HasColumnName("effective_epoch");

                    b.Property<byte[]>("SubstateIdentifier")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("substate_identifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<long>("ValidatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("validator_id");

                    b.HasKey("UpStateVersion", "UpOperationGroupIndex", "UpOperationIndexInGroup");

                    b.HasAlternateKey("SubstateIdentifier");

                    b.HasIndex("ValidatorId");

                    b.HasIndex("DownStateVersion", "DownOperationGroupIndex");

                    b.ToTable("validator_data_substates");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Substates.ValidatorStakeBalanceSubstate", b =>
                {
                    b.Property<long>("UpStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("up_state_version");

                    b.Property<int>("UpOperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("up_operation_group_index");

                    b.Property<int>("UpOperationIndexInGroup")
                        .HasColumnType("integer")
                        .HasColumnName("up_operation_index_in_group");

                    b.Property<BigInteger>("Amount")
                        .HasPrecision(1000)
                        .HasColumnType("numeric(1000,0)")
                        .HasColumnName("amount");

                    b.Property<int?>("DownOperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("down_operation_group_index");

                    b.Property<int?>("DownOperationIndexInGroup")
                        .HasColumnType("integer")
                        .HasColumnName("down_operation_index_in_group");

                    b.Property<long?>("DownStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("down_state_version");

                    b.Property<long>("EndOfEpoch")
                        .HasColumnType("bigint")
                        .HasColumnName("epoch");

                    b.Property<byte[]>("SubstateIdentifier")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("substate_identifier");

                    b.Property<long>("ValidatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("validator_id");

                    b.HasKey("UpStateVersion", "UpOperationGroupIndex", "UpOperationIndexInGroup");

                    b.HasAlternateKey("SubstateIdentifier");

                    b.HasIndex("ValidatorId");

                    b.HasIndex("DownStateVersion", "DownOperationGroupIndex");

                    b.HasIndex("EndOfEpoch", "ValidatorId")
                        .IsUnique();

                    b.ToTable("validator_stake_balance_substates");
                });

            modelBuilder.Entity("Common.Database.Models.Mempool.MempoolTransaction", b =>
                {
                    b.Property<byte[]>("TransactionIdentifierHash")
                        .HasColumnType("bytea")
                        .HasColumnName("transaction_id");

                    b.Property<Instant?>("CommitTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("commit_timestamp");

                    b.Property<string>("FailureExplanation")
                        .HasColumnType("text")
                        .HasColumnName("failure_explanation");

                    b.Property<string>("FailureReason")
                        .HasColumnType("text")
                        .HasColumnName("failure_reason");

                    b.Property<Instant?>("FailureTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("failure_timestamp");

                    b.Property<Instant?>("FirstSeenInMempoolTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_seen_in_mempool_timestamp");

                    b.Property<Instant?>("FirstSubmittedToGatewayTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_submitted_to_gateway_timestamp");

                    b.Property<Instant?>("LastDroppedOutOfMempoolTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_missing_from_mempool_timestamp");

                    b.Property<Instant?>("LastSubmittedToGatewayTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_submitted_to_gateway_timestamp");

                    b.Property<string>("LastSubmittedToNodeName")
                        .HasColumnType("text")
                        .HasColumnName("last_submitted_to_node_name");

                    b.Property<Instant?>("LastSubmittedToNodeTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_submitted_to_node_timestamp");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("payload");

                    b.Property<string>("Status")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("SubmissionToNodesCount")
                        .HasColumnType("integer")
                        .HasColumnName("submission_count");

                    b.Property<bool>("SubmittedByThisGateway")
                        .HasColumnType("boolean")
                        .HasColumnName("submitted_by_this_gateway");

                    b.Property<string>("TransactionContents")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("transaction_contents");

                    b.HasKey("TransactionIdentifierHash");

                    b.HasIndex("Status");

                    b.ToTable("mempool_transactions");
                });

            modelBuilder.Entity("Common.Database.Models.Node", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<bool>("EnabledForIndexing")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled_for_indexing");

                    b.Property<decimal>("TrustWeighting")
                        .HasColumnType("numeric")
                        .HasColumnName("trust_weighting");

                    b.HasKey("Name");

                    b.ToTable("nodes");
                });

            modelBuilder.Entity("Common.Database.Models.SingleEntries.LedgerStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<Instant>("LastUpdated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<long>("TopOfLedgerStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("top_of_ledger_state_version");

                    b.HasKey("Id");

                    b.HasIndex("TopOfLedgerStateVersion");

                    b.ToTable("ledger_status");
                });

            modelBuilder.Entity("Common.Database.Models.SingleEntries.NetworkConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("network_configuration");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.History.AccountResourceBalanceHistory", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.Normalization.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_account_resource_balance_history_from_transaction");

                    b.HasOne("Common.Database.Models.Ledger.Normalization.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "ToLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("ToStateVersion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_account_resource_balance_history_to_transaction");

                    b.OwnsOne("Common.Database.Models.Ledger.History.BalanceEntry", "BalanceEntry", b1 =>
                        {
                            b1.Property<long>("AccountResourceBalanceHistoryAccountId")
                                .HasColumnType("bigint");

                            b1.Property<long>("AccountResourceBalanceHistoryResourceId")
                                .HasColumnType("bigint");

                            b1.Property<long>("AccountResourceBalanceHistoryFromStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<BigInteger>("Balance")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("balance");

                            b1.HasKey("AccountResourceBalanceHistoryAccountId", "AccountResourceBalanceHistoryResourceId", "AccountResourceBalanceHistoryFromStateVersion");

                            b1.ToTable("account_resource_balance_history");

                            b1.WithOwner()
                                .HasForeignKey("AccountResourceBalanceHistoryAccountId", "AccountResourceBalanceHistoryResourceId", "AccountResourceBalanceHistoryFromStateVersion");
                        });

                    b.Navigation("Account");

                    b.Navigation("BalanceEntry")
                        .IsRequired();

                    b.Navigation("FromLedgerTransaction");

                    b.Navigation("Resource");

                    b.Navigation("ToLedgerTransaction");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.History.AccountValidatorStakeHistory", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.Normalization.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_account_validator_stake_history_from_transaction");

                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "ToLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("ToStateVersion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_account_validator_stake_history_to_transaction");

                    b.HasOne("Common.Database.Models.Ledger.Normalization.Validator", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Common.Database.Models.Ledger.History.AccountValidatorStakeSnapshot", "StakeSnapshot", b1 =>
                        {
                            b1.Property<long>("AccountValidatorStakeHistoryAccountId")
                                .HasColumnType("bigint");

                            b1.Property<long>("AccountValidatorStakeHistoryValidatorId")
                                .HasColumnType("bigint");

                            b1.Property<long>("AccountValidatorStakeHistoryFromStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<BigInteger>("TotalExitingXrdStake")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_exiting_xrd_stake");

                            b1.Property<BigInteger>("TotalPreparedUnStakeUnits")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_prepared_unstake_units");

                            b1.Property<BigInteger>("TotalPreparedXrdStake")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_prepared_xrd_stake");

                            b1.Property<BigInteger>("TotalStakeUnits")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_stake_units");

                            b1.HasKey("AccountValidatorStakeHistoryAccountId", "AccountValidatorStakeHistoryValidatorId", "AccountValidatorStakeHistoryFromStateVersion");

                            b1.ToTable("account_validator_stake_history");

                            b1.WithOwner()
                                .HasForeignKey("AccountValidatorStakeHistoryAccountId", "AccountValidatorStakeHistoryValidatorId", "AccountValidatorStakeHistoryFromStateVersion");
                        });

                    b.Navigation("Account");

                    b.Navigation("FromLedgerTransaction");

                    b.Navigation("StakeSnapshot")
                        .IsRequired();

                    b.Navigation("ToLedgerTransaction");

                    b.Navigation("Validator");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.History.ResourceSupplyHistory", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_resource_supply_history_from_transaction");

                    b.HasOne("Common.Database.Models.Ledger.Normalization.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "ToLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("ToStateVersion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_resource_supply_history_to_transaction");

                    b.OwnsOne("Common.Database.Models.Ledger.History.ResourceSupply", "ResourceSupply", b1 =>
                        {
                            b1.Property<long>("ResourceSupplyHistoryResourceId")
                                .HasColumnType("bigint");

                            b1.Property<long>("ResourceSupplyHistoryFromStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<BigInteger>("TotalBurnt")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_burnt");

                            b1.Property<BigInteger>("TotalMinted")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_minted");

                            b1.Property<BigInteger>("TotalSupply")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_supply");

                            b1.HasKey("ResourceSupplyHistoryResourceId", "ResourceSupplyHistoryFromStateVersion");

                            b1.ToTable("resource_supply_history");

                            b1.WithOwner()
                                .HasForeignKey("ResourceSupplyHistoryResourceId", "ResourceSupplyHistoryFromStateVersion");
                        });

                    b.Navigation("FromLedgerTransaction");

                    b.Navigation("Resource");

                    b.Navigation("ResourceSupply")
                        .IsRequired();

                    b.Navigation("ToLedgerTransaction");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.History.ValidatorStakeHistory", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_validator_stake_history_from_transaction");

                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "ToLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("ToStateVersion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_validator_stake_history_to_transaction");

                    b.HasOne("Common.Database.Models.Ledger.Normalization.Validator", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Common.Database.Models.Ledger.History.ValidatorStakeSnapshot", "StakeSnapshot", b1 =>
                        {
                            b1.Property<long>("ValidatorStakeHistoryValidatorId")
                                .HasColumnType("bigint");

                            b1.Property<long>("ValidatorStakeHistoryFromStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<BigInteger>("TotalExitingXrdStake")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_exiting_xrd_stake");

                            b1.Property<BigInteger>("TotalPreparedUnStakeUnits")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_prepared_unstake_units");

                            b1.Property<BigInteger>("TotalPreparedXrdStake")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_prepared_xrd_stake");

                            b1.Property<BigInteger>("TotalStakeUnits")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_stake_units");

                            b1.Property<BigInteger>("TotalXrdStake")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_xrd_staked");

                            b1.HasKey("ValidatorStakeHistoryValidatorId", "ValidatorStakeHistoryFromStateVersion");

                            b1.ToTable("validator_stake_history");

                            b1.WithOwner()
                                .HasForeignKey("ValidatorStakeHistoryValidatorId", "ValidatorStakeHistoryFromStateVersion");
                        });

                    b.Navigation("FromLedgerTransaction");

                    b.Navigation("StakeSnapshot")
                        .IsRequired();

                    b.Navigation("ToLedgerTransaction");

                    b.Navigation("Validator");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Joins.AccountTransaction", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.Normalization.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "LedgerTransaction")
                        .WithMany()
                        .HasForeignKey("ResultantStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("LedgerTransaction");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.LedgerOperationGroup", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "LedgerTransaction")
                        .WithMany("SubstantiveOperationGroups")
                        .HasForeignKey("ResultantStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Common.Database.Models.Ledger.InferredAction", "InferredAction", b1 =>
                        {
                            b1.Property<long>("LedgerOperationGroupResultantStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<int>("LedgerOperationGroupOperationGroupIndex")
                                .HasColumnType("integer");

                            b1.Property<BigInteger?>("Amount")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("inferred_action_amount");

                            b1.Property<long?>("FromAccountId")
                                .HasColumnType("bigint")
                                .HasColumnName("inferred_action_from_account_id");

                            b1.Property<long?>("ResourceId")
                                .HasColumnType("bigint")
                                .HasColumnName("inferred_action_resource_id");

                            b1.Property<long?>("ToAccountId")
                                .HasColumnType("bigint")
                                .HasColumnName("inferred_action_to_account_id");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("inferred_action_type");

                            b1.Property<long?>("ValidatorId")
                                .HasColumnType("bigint")
                                .HasColumnName("inferred_action_validator_id");

                            b1.HasKey("LedgerOperationGroupResultantStateVersion", "LedgerOperationGroupOperationGroupIndex");

                            b1.HasIndex("FromAccountId");

                            b1.HasIndex("ResourceId");

                            b1.HasIndex("ToAccountId");

                            b1.HasIndex("ValidatorId");

                            b1.ToTable("operation_groups");

                            b1.HasOne("Common.Database.Models.Ledger.Normalization.Account", "FromAccount")
                                .WithMany()
                                .HasForeignKey("FromAccountId");

                            b1.HasOne("Common.Database.Models.Ledger.Normalization.Resource", "Resource")
                                .WithMany()
                                .HasForeignKey("ResourceId");

                            b1.HasOne("Common.Database.Models.Ledger.Normalization.Account", "ToAccount")
                                .WithMany()
                                .HasForeignKey("ToAccountId");

                            b1.HasOne("Common.Database.Models.Ledger.Normalization.Validator", "Validator")
                                .WithMany()
                                .HasForeignKey("ValidatorId");

                            b1.WithOwner()
                                .HasForeignKey("LedgerOperationGroupResultantStateVersion", "LedgerOperationGroupOperationGroupIndex");

                            b1.Navigation("FromAccount");

                            b1.Navigation("Resource");

                            b1.Navigation("ToAccount");

                            b1.Navigation("Validator");
                        });

                    b.Navigation("InferredAction");

                    b.Navigation("LedgerTransaction");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.LedgerTransaction", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.RawTransaction", "RawTransaction")
                        .WithMany()
                        .HasForeignKey("TransactionIdentifierHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawTransaction");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Normalization.Account", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_account_from_transaction");

                    b.Navigation("FromLedgerTransaction");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Normalization.Resource", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_resource_from_transaction");

                    b.Navigation("FromLedgerTransaction");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Normalization.Validator", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_validator_from_transaction");

                    b.Navigation("FromLedgerTransaction");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Records.ValidatorProposalRecord", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "LastUpdatedAtLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("LastUpdatedAtStateVersion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_validator_proposal_record_last_updated_transaction");

                    b.HasOne("Common.Database.Models.Ledger.Normalization.Validator", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Common.Database.Models.Ledger.Records.ProposalRecord", "ProposalRecord", b1 =>
                        {
                            b1.Property<long>("ValidatorProposalRecordEpoch")
                                .HasColumnType("bigint");

                            b1.Property<long>("ValidatorProposalRecordValidatorId")
                                .HasColumnType("bigint");

                            b1.Property<long>("ProposalsCompleted")
                                .HasColumnType("bigint")
                                .HasColumnName("proposals_completed");

                            b1.Property<long>("ProposalsMissed")
                                .HasColumnType("bigint")
                                .HasColumnName("proposals_missed");

                            b1.HasKey("ValidatorProposalRecordEpoch", "ValidatorProposalRecordValidatorId");

                            b1.ToTable("validator_proposal_records");

                            b1.WithOwner()
                                .HasForeignKey("ValidatorProposalRecordEpoch", "ValidatorProposalRecordValidatorId");
                        });

                    b.Navigation("LastUpdatedAtLedgerTransaction");

                    b.Navigation("ProposalRecord")
                        .IsRequired();

                    b.Navigation("Validator");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Substates.AccountResourceBalanceSubstate", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.Normalization.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.Normalization.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.LedgerOperationGroup", "DownOperationGroup")
                        .WithMany()
                        .HasForeignKey("DownStateVersion", "DownOperationGroupIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_account_resource_balance_substate_down_operation_group");

                    b.HasOne("Common.Database.Models.Ledger.LedgerOperationGroup", "UpOperationGroup")
                        .WithMany()
                        .HasForeignKey("UpStateVersion", "UpOperationGroupIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_account_resource_balance_substate_up_operation_group");

                    b.Navigation("Account");

                    b.Navigation("DownOperationGroup");

                    b.Navigation("Resource");

                    b.Navigation("UpOperationGroup");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Substates.AccountStakeUnitBalanceSubstate", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.Normalization.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.Normalization.Validator", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.LedgerOperationGroup", "DownOperationGroup")
                        .WithMany()
                        .HasForeignKey("DownStateVersion", "DownOperationGroupIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_account_stake_unit_balance_substate_down_operation_group");

                    b.HasOne("Common.Database.Models.Ledger.LedgerOperationGroup", "UpOperationGroup")
                        .WithMany()
                        .HasForeignKey("UpStateVersion", "UpOperationGroupIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_account_stake_unit_balance_substate_up_operation_group");

                    b.Navigation("Account");

                    b.Navigation("DownOperationGroup");

                    b.Navigation("UpOperationGroup");

                    b.Navigation("Validator");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Substates.AccountXrdStakeBalanceSubstate", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.Normalization.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.Normalization.Validator", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.LedgerOperationGroup", "DownOperationGroup")
                        .WithMany()
                        .HasForeignKey("DownStateVersion", "DownOperationGroupIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_account_xrd_stake_balance_substate_down_operation_group");

                    b.HasOne("Common.Database.Models.Ledger.LedgerOperationGroup", "UpOperationGroup")
                        .WithMany()
                        .HasForeignKey("UpStateVersion", "UpOperationGroupIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_account_xrd_stake_balance_substate_up_operation_group");

                    b.Navigation("Account");

                    b.Navigation("DownOperationGroup");

                    b.Navigation("UpOperationGroup");

                    b.Navigation("Validator");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Substates.ResourceDataSubstate", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.Normalization.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.LedgerOperationGroup", "DownOperationGroup")
                        .WithMany()
                        .HasForeignKey("DownStateVersion", "DownOperationGroupIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_resource_data_substate_down_operation_group");

                    b.HasOne("Common.Database.Models.Ledger.LedgerOperationGroup", "UpOperationGroup")
                        .WithMany()
                        .HasForeignKey("UpStateVersion", "UpOperationGroupIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_resource_data_substate_up_operation_group");

                    b.OwnsOne("Common.Database.Models.Ledger.Substates.TokenData", "TokenData", b1 =>
                        {
                            b1.Property<long>("ResourceDataSubstateUpStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<int>("ResourceDataSubstateUpOperationGroupIndex")
                                .HasColumnType("integer");

                            b1.Property<int>("ResourceDataSubstateUpOperationIndexInGroup")
                                .HasColumnType("integer");

                            b1.Property<BigInteger>("Granularity")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("granularity");

                            b1.Property<bool>("IsMutable")
                                .HasColumnType("boolean")
                                .HasColumnName("is_mutable");

                            b1.Property<long?>("OwnerId")
                                .HasColumnType("bigint")
                                .HasColumnName("owner_id");

                            b1.HasKey("ResourceDataSubstateUpStateVersion", "ResourceDataSubstateUpOperationGroupIndex", "ResourceDataSubstateUpOperationIndexInGroup");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("resource_data_substates");

                            b1.HasOne("Common.Database.Models.Ledger.Normalization.Account", "Owner")
                                .WithMany()
                                .HasForeignKey("OwnerId");

                            b1.WithOwner()
                                .HasForeignKey("ResourceDataSubstateUpStateVersion", "ResourceDataSubstateUpOperationGroupIndex", "ResourceDataSubstateUpOperationIndexInGroup");

                            b1.Navigation("Owner");
                        });

                    b.OwnsOne("Common.Database.Models.Ledger.Substates.TokenMetadata", "TokenMetadata", b1 =>
                        {
                            b1.Property<long>("ResourceDataSubstateUpStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<int>("ResourceDataSubstateUpOperationGroupIndex")
                                .HasColumnType("integer");

                            b1.Property<int>("ResourceDataSubstateUpOperationIndexInGroup")
                                .HasColumnType("integer");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.Property<string>("IconUrl")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("icon_url");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<string>("Symbol")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("symbol");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("url");

                            b1.HasKey("ResourceDataSubstateUpStateVersion", "ResourceDataSubstateUpOperationGroupIndex", "ResourceDataSubstateUpOperationIndexInGroup");

                            b1.ToTable("resource_data_substates");

                            b1.WithOwner()
                                .HasForeignKey("ResourceDataSubstateUpStateVersion", "ResourceDataSubstateUpOperationGroupIndex", "ResourceDataSubstateUpOperationIndexInGroup");
                        });

                    b.Navigation("DownOperationGroup");

                    b.Navigation("Resource");

                    b.Navigation("TokenData");

                    b.Navigation("TokenMetadata");

                    b.Navigation("UpOperationGroup");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Substates.ValidatorDataSubstate", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.Normalization.Validator", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.LedgerOperationGroup", "DownOperationGroup")
                        .WithMany()
                        .HasForeignKey("DownStateVersion", "DownOperationGroupIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_validator_data_substate_down_operation_group");

                    b.HasOne("Common.Database.Models.Ledger.LedgerOperationGroup", "UpOperationGroup")
                        .WithMany()
                        .HasForeignKey("UpStateVersion", "UpOperationGroupIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_validator_data_substate_up_operation_group");

                    b.OwnsOne("Common.Database.Models.Ledger.Substates.PreparedValidatorFee", "PreparedValidatorFee", b1 =>
                        {
                            b1.Property<long>("ValidatorDataSubstateUpStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<int>("ValidatorDataSubstateUpOperationGroupIndex")
                                .HasColumnType("integer");

                            b1.Property<int>("ValidatorDataSubstateUpOperationIndexInGroup")
                                .HasColumnType("integer");

                            b1.Property<decimal>("PreparedFeePercentage")
                                .HasColumnType("numeric")
                                .HasColumnName("prepared_fee_percentage");

                            b1.HasKey("ValidatorDataSubstateUpStateVersion", "ValidatorDataSubstateUpOperationGroupIndex", "ValidatorDataSubstateUpOperationIndexInGroup");

                            b1.ToTable("validator_data_substates");

                            b1.WithOwner()
                                .HasForeignKey("ValidatorDataSubstateUpStateVersion", "ValidatorDataSubstateUpOperationGroupIndex", "ValidatorDataSubstateUpOperationIndexInGroup");
                        });

                    b.OwnsOne("Common.Database.Models.Ledger.Substates.PreparedValidatorOwner", "PreparedValidatorOwner", b1 =>
                        {
                            b1.Property<long>("ValidatorDataSubstateUpStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<int>("ValidatorDataSubstateUpOperationGroupIndex")
                                .HasColumnType("integer");

                            b1.Property<int>("ValidatorDataSubstateUpOperationIndexInGroup")
                                .HasColumnType("integer");

                            b1.Property<long>("PreparedOwnerId")
                                .HasColumnType("bigint")
                                .HasColumnName("prepared_owner_id");

                            b1.HasKey("ValidatorDataSubstateUpStateVersion", "ValidatorDataSubstateUpOperationGroupIndex", "ValidatorDataSubstateUpOperationIndexInGroup");

                            b1.HasIndex("PreparedOwnerId");

                            b1.ToTable("validator_data_substates");

                            b1.HasOne("Common.Database.Models.Ledger.Normalization.Account", "PreparedOwner")
                                .WithMany()
                                .HasForeignKey("PreparedOwnerId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ValidatorDataSubstateUpStateVersion", "ValidatorDataSubstateUpOperationGroupIndex", "ValidatorDataSubstateUpOperationIndexInGroup");

                            b1.Navigation("PreparedOwner");
                        });

                    b.OwnsOne("Common.Database.Models.Ledger.Substates.PreparedValidatorRegistered", "PreparedValidatorRegistered", b1 =>
                        {
                            b1.Property<long>("ValidatorDataSubstateUpStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<int>("ValidatorDataSubstateUpOperationGroupIndex")
                                .HasColumnType("integer");

                            b1.Property<int>("ValidatorDataSubstateUpOperationIndexInGroup")
                                .HasColumnType("integer");

                            b1.Property<bool>("PreparedIsRegistered")
                                .HasColumnType("boolean")
                                .HasColumnName("prepared_is_registered");

                            b1.HasKey("ValidatorDataSubstateUpStateVersion", "ValidatorDataSubstateUpOperationGroupIndex", "ValidatorDataSubstateUpOperationIndexInGroup");

                            b1.ToTable("validator_data_substates");

                            b1.WithOwner()
                                .HasForeignKey("ValidatorDataSubstateUpStateVersion", "ValidatorDataSubstateUpOperationGroupIndex", "ValidatorDataSubstateUpOperationIndexInGroup");
                        });

                    b.OwnsOne("Common.Database.Models.Ledger.Substates.ValidatorAllowDelegation", "ValidatorAllowDelegation", b1 =>
                        {
                            b1.Property<long>("ValidatorDataSubstateUpStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<int>("ValidatorDataSubstateUpOperationGroupIndex")
                                .HasColumnType("integer");

                            b1.Property<int>("ValidatorDataSubstateUpOperationIndexInGroup")
                                .HasColumnType("integer");

                            b1.Property<bool>("AllowDelegation")
                                .HasColumnType("boolean")
                                .HasColumnName("allow_delegation");

                            b1.HasKey("ValidatorDataSubstateUpStateVersion", "ValidatorDataSubstateUpOperationGroupIndex", "ValidatorDataSubstateUpOperationIndexInGroup");

                            b1.ToTable("validator_data_substates");

                            b1.WithOwner()
                                .HasForeignKey("ValidatorDataSubstateUpStateVersion", "ValidatorDataSubstateUpOperationGroupIndex", "ValidatorDataSubstateUpOperationIndexInGroup");
                        });

                    b.OwnsOne("Common.Database.Models.Ledger.Substates.ValidatorData", "ValidatorData", b1 =>
                        {
                            b1.Property<long>("ValidatorDataSubstateUpStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<int>("ValidatorDataSubstateUpOperationGroupIndex")
                                .HasColumnType("integer");

                            b1.Property<int>("ValidatorDataSubstateUpOperationIndexInGroup")
                                .HasColumnType("integer");

                            b1.Property<decimal>("FeePercentage")
                                .HasColumnType("numeric")
                                .HasColumnName("fee_percentage");

                            b1.Property<bool>("IsRegistered")
                                .HasColumnType("boolean")
                                .HasColumnName("is_registered");

                            b1.Property<long>("OwnerId")
                                .HasColumnType("bigint")
                                .HasColumnName("owner_id");

                            b1.HasKey("ValidatorDataSubstateUpStateVersion", "ValidatorDataSubstateUpOperationGroupIndex", "ValidatorDataSubstateUpOperationIndexInGroup");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("validator_data_substates");

                            b1.HasOne("Common.Database.Models.Ledger.Normalization.Account", "Owner")
                                .WithMany()
                                .HasForeignKey("OwnerId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ValidatorDataSubstateUpStateVersion", "ValidatorDataSubstateUpOperationGroupIndex", "ValidatorDataSubstateUpOperationIndexInGroup");

                            b1.Navigation("Owner");
                        });

                    b.OwnsOne("Common.Database.Models.Ledger.Substates.ValidatorMetadata", "ValidatorMetaData", b1 =>
                        {
                            b1.Property<long>("ValidatorDataSubstateUpStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<int>("ValidatorDataSubstateUpOperationGroupIndex")
                                .HasColumnType("integer");

                            b1.Property<int>("ValidatorDataSubstateUpOperationIndexInGroup")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("url");

                            b1.HasKey("ValidatorDataSubstateUpStateVersion", "ValidatorDataSubstateUpOperationGroupIndex", "ValidatorDataSubstateUpOperationIndexInGroup");

                            b1.ToTable("validator_data_substates");

                            b1.WithOwner()
                                .HasForeignKey("ValidatorDataSubstateUpStateVersion", "ValidatorDataSubstateUpOperationGroupIndex", "ValidatorDataSubstateUpOperationIndexInGroup");
                        });

                    b.Navigation("DownOperationGroup");

                    b.Navigation("PreparedValidatorFee");

                    b.Navigation("PreparedValidatorOwner");

                    b.Navigation("PreparedValidatorRegistered");

                    b.Navigation("UpOperationGroup");

                    b.Navigation("Validator");

                    b.Navigation("ValidatorAllowDelegation");

                    b.Navigation("ValidatorData");

                    b.Navigation("ValidatorMetaData");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.Substates.ValidatorStakeBalanceSubstate", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.Normalization.Validator", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Ledger.LedgerOperationGroup", "DownOperationGroup")
                        .WithMany()
                        .HasForeignKey("DownStateVersion", "DownOperationGroupIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_validator_stake_balance_substate_down_operation_group");

                    b.HasOne("Common.Database.Models.Ledger.LedgerOperationGroup", "UpOperationGroup")
                        .WithMany()
                        .HasForeignKey("UpStateVersion", "UpOperationGroupIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_validator_stake_balance_substate_up_operation_group");

                    b.Navigation("DownOperationGroup");

                    b.Navigation("UpOperationGroup");

                    b.Navigation("Validator");
                });

            modelBuilder.Entity("Common.Database.Models.SingleEntries.LedgerStatus", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "TopOfLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("TopOfLedgerStateVersion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ledger_status_top_transactions_state_version");

                    b.OwnsOne("Common.Database.Models.SingleEntries.SyncTarget", "SyncTarget", b1 =>
                        {
                            b1.Property<int>("LedgerStatusId")
                                .HasColumnType("integer");

                            b1.Property<long>("TargetStateVersion")
                                .HasColumnType("bigint")
                                .HasColumnName("sync_status_target_state_version");

                            b1.HasKey("LedgerStatusId");

                            b1.ToTable("ledger_status");

                            b1.WithOwner()
                                .HasForeignKey("LedgerStatusId");
                        });

                    b.Navigation("SyncTarget")
                        .IsRequired();

                    b.Navigation("TopOfLedgerTransaction");
                });

            modelBuilder.Entity("Common.Database.Models.SingleEntries.NetworkConfiguration", b =>
                {
                    b.OwnsOne("Common.Database.Models.SingleEntries.NetworkAddressHrps", "NetworkAddressHrps", b1 =>
                        {
                            b1.Property<int>("NetworkConfigurationId")
                                .HasColumnType("integer");

                            b1.Property<string>("AccountHrp")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("account_hrp");

                            b1.Property<string>("NodeHrp")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("node_hrp");

                            b1.Property<string>("ResourceHrpSuffix")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("resource_hrp_suffix");

                            b1.Property<string>("ValidatorHrp")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("validator_hrp");

                            b1.HasKey("NetworkConfigurationId");

                            b1.ToTable("network_configuration");

                            b1.WithOwner()
                                .HasForeignKey("NetworkConfigurationId");
                        });

                    b.OwnsOne("Common.Database.Models.SingleEntries.NetworkDefinition", "NetworkDefinition", b1 =>
                        {
                            b1.Property<int>("NetworkConfigurationId")
                                .HasColumnType("integer");

                            b1.Property<string>("NetworkName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("network_name");

                            b1.HasKey("NetworkConfigurationId");

                            b1.ToTable("network_configuration");

                            b1.WithOwner()
                                .HasForeignKey("NetworkConfigurationId");
                        });

                    b.OwnsOne("Common.Database.Models.SingleEntries.WellKnownAddresses", "WellKnownAddresses", b1 =>
                        {
                            b1.Property<int>("NetworkConfigurationId")
                                .HasColumnType("integer");

                            b1.Property<string>("XrdAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("xrd_address");

                            b1.HasKey("NetworkConfigurationId");

                            b1.ToTable("network_configuration");

                            b1.WithOwner()
                                .HasForeignKey("NetworkConfigurationId");
                        });

                    b.Navigation("NetworkAddressHrps")
                        .IsRequired();

                    b.Navigation("NetworkDefinition")
                        .IsRequired();

                    b.Navigation("WellKnownAddresses")
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.LedgerTransaction", b =>
                {
                    b.Navigation("SubstantiveOperationGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
