# Used by Docker Compose: https://docs.docker.com/compose/env-file/

# The name the app will be saved under in Docker compose
COMPOSE_PROJECT_NAME=radixdlt-network-gateway__toy-deployment

##############################################################################
# FULL NODE CONFIGURATION (skip this if connecting to an existing full node) #
##############################################################################

FULLNODE_LOG_LEVEL=info

# Mainnet: 1, Stokenet: 2, Releasenet: 3, RCnet: 4, Milestonenet: 5, Devopsnet: 6, Sandpitnet: 7, Localnet: 99
FULLNODE_NETWORK_ID=2

# This is the node to bootstrap the node address book from
# For some mainnet choices, see https://docs.radixdlt.com/main/node/docker-install-node.html#create-environment-variables-for-docker-install
# An example foundation stokenet node is: radix://tn1qw42uqkauehsmwk6msxve5zr9lapjd8r3np4z84nna8jlp03mfzwqd2tl8m@3.108.248.49
FULLNODE_NETWORK_BOOTSTRAP_NODE="radix://tn1qw42uqkauehsmwk6msxve5zr9lapjd8r3np4z84nna8jlp03mfzwqd2tl8m@3.108.248.49"

FULLNODE_KEY_PASSWORD="fullnode_key_password"

#################################
# NETWORK GATEWAY CONFIGURATION #
#################################

# Wait up to this many ms for PostgreSQL to boot up
MAX_DB_WAIT_MS_ON_START=60000

# Defines if certificate checks should be skipped against the Core API (eg if your Core API is exposed via nginx using self-signed certificates)
DISABLE_CORE_API_CERTIFICATE_CHECKS=false

# Defines if your Gateway APIs should boot up with swagger, to allow an easy overview of the API (shouldn't be enabled in production)
ENABLE_SWAGGER=true

# Whether to prevent Gateway API queries if the aggregator isn't synced up to current ledger state
PREVENT_OUTDATED_READ_REQUESTS=true
PREVENT_OUTDATED_CONSTRUCTION_REQUESTS=true

# The logical network name which the nodes you connect to must match with
# EG mainnet | stokenet | localnet
NETWORK_NAME=stokenet

POSTGRES_SUPERUSER=db_superuser
POSTGRES_SUPERUSER_PASSWORD=db_password
POSTGRES_DB_NAME=radixdlt_ledger

# Define the Full Node Core APIs to connect to below
# Note that fullnode resolves to the fullnode in the docker-compose file
# Note that host.docker.internal can be used to translate to the host machine's localhost from a docker container when run in Docker Desktop on Mac or Windows
# See - https://www.cloudsavvyit.com/14114/how-to-connect-to-localhost-within-a-docker-container/

NODE_0_NAME=One
NODE_0_CORE_API_ADDRESS=http://fullnode:3333
NODE_0_CORE_API_AUTHORIZATION_HEADER=
NODE_0_ENABLED=true

NODE_1_NAME=Two
NODE_1_CORE_API_ADDRESS=
NODE_1_CORE_API_AUTHORIZATION_HEADER=
NODE_1_ENABLED=false

NODE_2_NAME=Three
NODE_2_CORE_API_ADDRESS=
NODE_2_CORE_API_AUTHORIZATION_HEADER=
NODE_2_ENABLED=false

NODE_3_NAME=Four
NODE_3_CORE_API_ADDRESS=
NODE_3_CORE_API_AUTHORIZATION_HEADER=
NODE_3_ENABLED=false

NODE_4_NAME=Five
NODE_4_CORE_API_ADDRESS=
NODE_4_CORE_API_AUTHORIZATION_HEADER=
NODE_4_ENABLED=false
