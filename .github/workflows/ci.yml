name: dotnet package

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['6.0.x']
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
          include-prerelease: true
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test
        run: dotnet test --no-restore --verbosity normal
###
  publish-docker-pr:
    runs-on: ubuntu-latest
    outputs:
      data-aggregator-tag: ${{ steps.setup_tags.outputs.data-aggregator-tag}}
      gateway-api-tag: ${{ steps.setup_tags.outputs.gateway-api-tag}}
    steps:
      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v1
      - uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - uses: actions/checkout@v2
        if: github.event_name == 'push' || github.event_name == 'release'
        with:
          fetch-depth: 0
      - name: Login to GCR
        if: "${{ github.event_name == 'pull_request' }}"
        uses: docker/login-action@v1
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.GCR_EU_DEV_JSON_KEY }}
      - name: Setup tags for docker image
        id: setup_tags
        run: |
            GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD | sed 's/\//-/g')
            GIT_COMMIT=$(git log -1 --format=%h )
            DOCKER_TAG=${GIT_BRANCH}-${GIT_COMMIT}

            GH_EVENT_NAME="${{ github.event_name }}"
            GH_ACTION_NAME="${{ github.event.action}}"
            DOCKER_REPO_DATA_AGGREGATOR="eu.gcr.io/dev-container-repo/ng-data-aggregator"
            DOCKER_REPO_GATEWAY_API="eu.gcr.io/dev-container-repo/ng-gateway-api"

            DATA_AGGREGATOR_TAGS="${DOCKER_REPO_DATA_AGGREGATOR}:${DOCKER_TAG}"
            GATEWAY_API_TAGS="${DOCKER_REPO_GATEWAY_API}:${DOCKER_TAG}"

            echo "DATA_AGGREGATOR_TAGS: $DATA_AGGREGATOR_TAGS"
            echo "GATEWAY_API_TAGS: $GATEWAY_API_TAGS"
            echo "DATA_AGGREGATOR_TAGS=$DATA_AGGREGATOR_TAGS" >> $GITHUB_ENV
            echo "GATEWAY_API_TAGS=$GATEWAY_API_TAGS" >> $GITHUB_ENV
            echo "::set-output name=data-aggregator-tag::$DOCKER_TAG"
            echo "::set-output name=gateway-api-tag::$DOCKER_TAG"
      - name: Docker build and push DataAggregator
        uses: docker/build-push-action@v2
        with:
          file: ./src/DataAggregator/Dockerfile
          TAGS: |
            ${{ env.DATA_AGGREGATOR_TAGS }}
          push: true
          context: ./
             
      - name: Docker build and push Gateway API
        uses: docker/build-push-action@v2
        with:
          file: ./src/GatewayAPI/Dockerfile
          TAGS: |
            ${{ env.GATEWAY_API_TAGS }}
          push: true
          context: ./
##
  publish-docker:
    if: "${{ github.event_name != 'pull_request' }}"
    runs-on: ubuntu-latest
    environment: release
    outputs:  
      data-aggregator-tag: ${{ steps.setup_tags.outputs.data-aggregator-tag}}
      gateway-api-tag: ${{ steps.setup_tags.outputs.gateway-api-tag}}
    steps:
      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v1
      - uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - uses: actions/checkout@v2
        if: github.event_name == 'push' || github.event_name == 'release'
        with:
          fetch-depth: 0
      - name: Login to Dockerhub (release)
        uses: docker/login-action@v1
        if: "${{ github.event_name == 'release' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Login to GCR
        if: "${{ github.event_name != 'release' }}"
        uses: docker/login-action@v1
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.GCR_EU_DEV_JSON_KEY }}
      - name: Setup tags for docker image
        id: setup_tags
        run: |
            docker_tag_with_branch(){
               GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD | sed 's/\//-/g')
               GIT_COMMIT=$(git log -1 --format=%h )
               DOCKER_TAG=${GIT_BRANCH}-${GIT_COMMIT}
            }

            GH_EVENT_NAME="${{ github.event_name }}"
            GH_ACTION_NAME="${{ github.event.action}}"
            DOCKER_REPO_DATA_AGGREGATOR="eu.gcr.io/dev-container-repo/ng-data-aggregator"
            DOCKER_REPO_GATEWAY_API="eu.gcr.io/dev-container-repo/ng-gateway-api"

            case "${GH_EVENT_NAME}" in
                release)
                    DOCKER_REPO_DATA_AGGREGATOR="radixdlt/ng-data-aggregator"
                    DOCKER_REPO_GATEWAY_API="radixdlt/ng-gateway-api"
                    DATA_AGGREGATOR_TAGS="${DOCKER_REPO_DATA_AGGREGATOR}:${{ github.event.release.tag_name }}"
                    GATEWAY_API_TAGS="${DOCKER_REPO_GATEWAY_API}:${{ github.event.release.tag_name }}"
                ;;
                pull_request | push)
                    docker_tag_with_branch

                    DATA_AGGREGATOR_TAGS="${DOCKER_REPO_DATA_AGGREGATOR}:${DOCKER_TAG}"
                    GATEWAY_API_TAGS="${DOCKER_REPO_GATEWAY_API}:${DOCKER_TAG}"
                ;;
                *)
                    echo "${GH_EVENT_NAME} not implemented yet"
                    exit 1
                ;;
            esac

            echo "DATA_AGGREGATOR_TAGS: $DATA_AGGREGATOR_TAGS"
            echo "GATEWAY_API_TAGS: $GATEWAY_API_TAGS"
            echo "DATA_AGGREGATOR_TAGS=$DATA_AGGREGATOR_TAGS" >> $GITHUB_ENV
            echo "GATEWAY_API_TAGS=$GATEWAY_API_TAGS" >> $GITHUB_ENV
            echo "::set-output name=data-aggregator-tag::$DOCKER_TAG"
            echo "::set-output name=gateway-api-tag::$DOCKER_TAG"
      - name: Docker build and push DataAggregator
        uses: docker/build-push-action@v2
        with:
          file: ./src/DataAggregator/Dockerfile
          TAGS: |
            ${{ env.DATA_AGGREGATOR_TAGS }}
          push: true
          context: ./
             
      - name: Docker build and push Gateway API
        uses: docker/build-push-action@v2
        with:
          file: ./src/GatewayAPI/Dockerfile
          TAGS: |
            ${{ env.GATEWAY_API_TAGS }}
          push: true
          context: ./
    
  dispatch-deployment-events:
    runs-on: ubuntu-latest
    needs: publish-docker
    steps:
      - name: setup "namespace_postfix"
        run: |
          GH_EVENT_NAME="${{ github.event_name }}"
          case "${GH_EVENT_NAME}" in
                release)
                    echo "NAMESPACE=stokenet" >> $GITHUB_ENV
                    echo "EVENT_TYPE=ng_stokenet" >> $GITHUB_ENV
                ;;
                pull_request)
                    pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
                    echo "NAMESPACE=pr-$pull_number" >> $GITHUB_ENV
                    echo "EVENT_TYPE=ng_pr" >> $GITHUB_ENV

                ;;
                push)
                    
                    echo "NAMESPACE=sandpitnet" >> $GITHUB_ENV
                    echo "EVENT_TYPE=ng_dev" >> $GITHUB_ENV
                ;;
                *)
                    echo "${GH_EVENT_NAME} not implemented yet"
                    exit 1
                ;;
            esac
      - name: Trigger pull request deployment event ${{ github.ref }}
        run: |
          curl --silent --show-error --fail --location --request POST 'https://github-worker.radixdlt.com/repos/radixdlt/radixdlt-iac/dispatches' \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Authorization: Basic ${{secrets.CF_GITHUB_WORKER_ENCODED_BASIC_AUTH}}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "event_type": "${{env.EVENT_TYPE}}",
                "client_payload": {
                    "namespace_postfix": "${{env.NAMESPACE}}",
                    "data_aggregator_image_tag": "${{ needs.publish-docker.outputs.data-aggregator-tag }}",
                    "gateway_api_image_tag": "${{ needs.publish-docker.outputs.gateway-api-tag }}"
                }
            }'
 
  dispatch-pr-hns-deletion-events:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Get PR HSN
        run: |
          pull_number=${{ github.event.number }}
          echo "NAMESPACE=ng-pr-$pull_number" >> $GITHUB_ENV
          echo "EVENT_TYPE=pr_hsn" >> $GITHUB_ENV

      # - name: Check if the user belongs to radixdlt org
      #   id: is_radixdlt_member
      #   uses: jamessingleton/is-organization-member@v1
      #   with:
      #     organization: radixdlt
      #     username: ${{ github.actor }}
      #     token: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger pr deletion event ${{ github.ref }}
        run: |
          curl --silent --show-error --fail --location --request POST 'https://github-worker.radixdlt.com/repos/radixdlt/radixdlt-iac/dispatches' \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Authorization: Basic ${{secrets.CF_GITHUB_WORKER_ENCODED_BASIC_AUTH}}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "event_type": "${{env.EVENT_TYPE}}",
                "client_payload": {
                    "hns_pr_sub_namespace": "${{env.NAMESPACE}}"
                }
            }'  
