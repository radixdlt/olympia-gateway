name: dotnet package

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['6.0.x']
    steps:
      - uses: RDXWorks-actions/checkout@main
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: RDXWorks-actions/setup-dotnet@main
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
          include-prerelease: true
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test
        run: dotnet test --no-restore --verbosity normal

  publish-docker-pr:
    if: "${{ github.event_name == 'pull_request' }}"
    runs-on: ubuntu-latest
    outputs:
      data-aggregator-tag: ${{ steps.setup_tags.outputs.data-aggregator-tag }}
      gateway-api-tag: ${{ steps.setup_tags.outputs.gateway-api-tag }}
    steps:
      - name: Dump context
        uses: RDXWorks-actions/ghaction-dump-context@master
      - uses: RDXWorks-actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - uses: RDXWorks-actions/checkout@main
        if: github.event_name == 'push' || github.event_name == 'release'
        with:
          fetch-depth: 0
      - name: Login to GCR
        uses: RDXWorks-actions/login-action@master
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.GCR_EU_DEV_JSON_KEY }}

      - name: Setup tags for docker image
        id: setup_tags
        uses: ./.github/actions/set-variables
        with:
          github_event_name: ${{ github.event_name }}
          github_action_name: ${{ github.event.action}}

      - name: Docker build and push DataAggregator
        uses: RDXWorks-actions/build-push-action@master
        with:
          file: ./src/DataAggregator/Dockerfile
          TAGS: |
            ${{ steps.setup_tags.outputs.data_aggregator_tags }}
          push: true
          context: ./

      - name: Docker build and push Gateway API
        uses: RDXWorks-actions/build-push-action@master
        with:
          file: ./src/GatewayAPI/Dockerfile
          TAGS: |
            ${{ steps.setup_tags.outputs.gateway_api_tags }}
          push: true
          context: ./

  publish-docker:
    if: "${{ github.event_name != 'pull_request' }}"
    runs-on: ubuntu-latest
    environment: release
    outputs:
      data-aggregator-tag: ${{ steps.setup_tags.outputs.data-aggregator-tag}}
      gateway-api-tag: ${{ steps.setup_tags.outputs.gateway-api-tag}}
    steps:
      - name: Dump context
        uses: RDXWorks-actions/ghaction-dump-context@master
      - uses: RDXWorks-actions/checkout@main
        if: github.event_name == 'pull_request'
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - uses: RDXWorks-actions/checkout@main
        if: github.event_name == 'push' || github.event_name == 'release'
        with:
          fetch-depth: 0
      - name: Login to Dockerhub (release)
        uses: RDXWorks-actions/login-action@master
        if: "${{ github.event_name == 'release' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Login to GCR
        if: "${{ github.event_name != 'release' }}"
        uses: RDXWorks-actions/login-action@master
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.GCR_EU_DEV_JSON_KEY }}

      - name: Setup tags for docker image
        id: setup_tags
        uses: ./.github/actions/set-variables
        with:
          github_event_name: ${{ github.event_name }}
          github_action_name: ${{ github.event.action}}

      - name: Docker build and push DataAggregator
        uses: RDXWorks-actions/build-push-action@master
        with:
          file: ./src/DataAggregator/Dockerfile
          TAGS: |
            ${{ steps.setup_tags.outputs.data_aggregator_tags }}
          push: true
          context: ./

      - name: Docker build and push Gateway API
        uses: RDXWorks-actions/build-push-action@master
        with:
          file: ./src/GatewayAPI/Dockerfile
          TAGS: |
            ${{ steps.setup_tags.outputs.gateway_api_tags }}
          push: true
          context: ./

# TODO: Only radixdlt members to trigger these events
  dispatch-pr-deployment-events:
    if: "${{ github.event_name == 'pull_request' }}"
    runs-on: ubuntu-latest
    needs: publish-docker-pr
    steps:
      - name: setup "namespace_postfix"
        run: |
          GH_EVENT_NAME="${{ github.event_name }}"
          pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo "NAMESPACE=pr-$pull_number" >> $GITHUB_ENV
          echo "EVENT_TYPE=ng_pr" >> $GITHUB_ENV

      - name: Trigger pull request deployment event ${{ github.ref }}
        run: |
          curl --silent --show-error --fail --location --request POST 'https://github-worker.radixdlt.com/repos/radixdlt/${{secrets.DISPATCH_REPO}}/dispatches' \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Authorization: Basic ${{secrets.CF_GITHUB_WORKER_ENCODED_BASIC_AUTH}}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "event_type": "${{env.EVENT_TYPE}}",
                "client_payload": {
                    "namespace_postfix": "${{env.NAMESPACE}}",
                    "data_aggregator_image_tag": "${{ needs.publish-docker-pr.outputs.data-aggregator-tag }}",
                    "gateway_api_image_tag": "${{ needs.publish-docker-pr.outputs.gateway-api-tag }}"
                }
            }'

  dispatch-deployment-events:
    runs-on: ubuntu-latest
    needs: publish-docker
    steps:
      - name: setup "namespace_postfix"
        run: |
          GH_EVENT_NAME="${{ github.event_name }}"
          case "${GH_EVENT_NAME}" in
                release)
                    echo "NAMESPACE=stokenet" >> $GITHUB_ENV
                    echo "EVENT_TYPE=ng_stokenet" >> $GITHUB_ENV
                ;;
                push)

                    echo "NAMESPACE=sandpitnet" >> $GITHUB_ENV
                    echo "EVENT_TYPE=ng_dev" >> $GITHUB_ENV
                ;;
                *)
                    echo "${GH_EVENT_NAME} not implemented yet"
                    exit 1
                ;;
            esac
      - name: Trigger deployment event ${{ github.ref }}
        run: |
          curl --silent --show-error --fail --location --request POST 'https://github-worker.radixdlt.com/repos/radixdlt/${{secrets.DISPATCH_REPO}}/dispatches' \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Authorization: Basic ${{secrets.CF_GITHUB_WORKER_ENCODED_BASIC_AUTH}}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "event_type": "${{env.EVENT_TYPE}}",
                "client_payload": {
                    "namespace_postfix": "${{env.NAMESPACE}}",
                    "data_aggregator_image_tag": "${{ needs.publish-docker.outputs.data-aggregator-tag }}",
                    "gateway_api_image_tag": "${{ needs.publish-docker.outputs.gateway-api-tag }}"
                }
            }'
